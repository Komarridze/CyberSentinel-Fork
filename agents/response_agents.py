import os
import logging

# Construct the log file path relative to this file (agents folder).
LOG_FILE = os.path.join(os.path.dirname(__file__), "..", "logfiles", "response_agent.log")
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

# Set up a logger specifically for the ResponseAgent.
logger = logging.getLogger("ResponseAgent")
logger.setLevel(logging.INFO)
handler = logging.FileHandler(LOG_FILE)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

class ResponseAgent:
    def __init__(self, agent_type="default"):
        self.agent_type = agent_type

    def respond(self, threat_data: dict) -> dict:
        """
        Processes the threat data generated by upstream agents (e.g., log parser and pattern detector)
        and determines the appropriate response action.

        Decision logic:
          - If both "suspicious ip" and "failed login" are present in the parsed text,
            then the combined response is "alert_and_isolate".
          - If "suspicious ip" is present, the response is "isolate".
          - Else if "failed login" is present, the response is "alert".
          - Otherwise, default to "collect_more_data".
          
        The decision is logged to a file for later review.

        :param threat_data: A dictionary containing threat details, e.g., {"parsed": "<text>", ...}
        :return: A dictionary with keys "agent_type" and "action".
        """
        try:
            parsed_text = threat_data.get("parsed", "").lower()
            if "suspicious ip" in parsed_text and "failed login" in parsed_text:
                action = "alert_and_isolate"
            elif "suspicious ip" in parsed_text:
                action = "isolate"
            elif "failed login" in parsed_text:
                action = "alert"
            else:
                action = "collect_more_data"

            response = {"agent_type": self.agent_type, "action": action}
            logger.info("Processed threat data: %s | Response: %s", threat_data, response)
            return response
        except Exception as e:
            logger.exception("Error processing threat data: %s", threat_data)
            return {"agent_type": self.agent_type, "action": "error", "error": str(e)}
